/* tslint:disable */
// generated by typescript-json-validator
import Ajv from "ajv";
import { tMySimpleExampleType } from "./types";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export type { tMySimpleExampleType };
export const Schema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  definitions: {
    tMySimpleExampleType: {
      defaultProperties: [],
      properties: {
        field: {
          enum: ["value"],
          type: "string",
        },
        field1: {
          type: "string",
        },
        field3: {
          type: "string",
        },
      },
      required: ["field", "field1"],
      type: "object",
    },
  },
};
ajv.addSchema(Schema, "Schema");
export function validate(typeName: "tMySimpleExampleType"): (value: unknown) => tMySimpleExampleType;
export function validate(typeName: string): (value: unknown) => any {
  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
  return (value: unknown): any => {
    if (!validator) {
      throw new Error(`No validator defined for Schema#/definitions/${typeName}`);
    }

    const valid = validator(value);

    if (!valid) {
      throw new Error(
        "Invalid " +
          typeName +
          ": " +
          ajv.errorsText(
            validator.errors!.filter((e: any) => e.keyword !== "if"),
            { dataVar: typeName },
          ),
      );
    }

    return value as any;
  };
}
